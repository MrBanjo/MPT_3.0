<?php

namespace AppBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Symfony\Component\HttpFoundation\Session\Session;

/**
 * CaddieRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CaddieRepository extends EntityRepository
{
    public function getUserOrSession($user)
    {
        $session = new Session();
        $identifiant = ($user) ? 'user' : 'session';
        $identifiantValue = ($user) ? $user : $session->getId();

        return ['id' => $identifiant, 'value' => $identifiantValue];
    }

    public function getAllProducts($user)
    {
        $qb = $this->createQueryBuilder('a');
        $results = $qb
        ->where('a.'.$this->getUserOrSession($user)['id'].' = :identifiant')
        ->setParameter('identifiant', $this->getUserOrSession($user)['value'])
        ->getQuery()
        ->getResult();

        return $results;
    }

    public function switchSessionToUserProduct($user)
    {
        $session = new Session();
        $listecaddies = $this->getEntityManager()->getRepository('AppBundle:Caddie')->findBySession($session->getId());
        $userProducts = $this->getEntityManager()->getRepository('AppBundle:Caddie')->findByUser($user);

        if (!empty($userProducts) && !empty($listecaddies)) {
            foreach ($userProducts as $userProduct) {
                $this->getEntityManager()->remove($userProduct);
            }
        }

        foreach ($listecaddies as $listecaddie) {
            if (!$listecaddie->getUser() && $user) {
                $listecaddie->setUser($user);
                $this->getEntityManager()->persist($listecaddie);
            }
        }

        $this->getEntityManager()->flush();
    }

    public function getTotalPrix($list)
    {
        // Additionne les prix de chaque produits avec leur quantitÃ©
        $prixtotal = 0;
        foreach ($list as $result) {
            $prixtotal += ($result->getPrix()) * ($result->getQuantite());
        }

        return $prixtotal;
    }

    public function getProductCaddie($id, $productType, $user)
    {
        $qb = $this->createQueryBuilder('a');
        $qb
        ->where('a.'.$this->getUserOrSession($user)['id'].' = :identifiant')
        ->setParameter('identifiant', $this->getUserOrSession($user)['value'])
        ->andwhere('a.'.$productType.' = :id')
        ->setParameter('id', $id);

        return $qb->getQuery()->getResult();
    }
}
